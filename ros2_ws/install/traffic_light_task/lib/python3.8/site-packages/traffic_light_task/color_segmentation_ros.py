# Nodo prediction_yolov8.py tiene que enviar en un nuevo topic los semaforos recortados para que este nodo reciba ya la imagen solamente de semaforos
# Convertir imagen a formato opencv en callback de subscriptor

import cv2
import numpy as np

# 1. Cargar la imagen
image = cv2.imread('ambar.jpg')

# 2. Convertir la imagen a espacio de color HSV
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

# 3. Definir rangos de colores para el semáforo en HSV
lower_green = np.array([45, 23, 82])
upper_green = np.array([72, 245, 255])

lower_yellow = np.array([25, 25, 80])
upper_yellow = np.array([44, 255, 255])

lower_red1 = np.array([0, 70, 110])
upper_red1 = np.array([25, 255, 255])
lower_red2 = np.array([165, 70, 110])
upper_red2 = np.array([180, 255, 255])

# 4. Segmentar la imagen por cada color
mask_green = cv2.inRange(hsv, lower_green, upper_green)
mask_yellow = cv2.inRange(hsv, lower_yellow, upper_yellow)
mask_red1 = cv2.inRange(hsv, lower_red1, upper_red1)
mask_red2 = cv2.inRange(hsv, lower_red2, upper_red2)
mask_red = cv2.bitwise_or(mask_red1, mask_red2)

# # 5. Crear imágenes binarias para cada color
# binary_green = np.where(mask_green > 0, 1, 0)
# binary_yellow = np.where(mask_yellow > 0, 1, 0)
# binary_red = np.where(mask_red > 0, 1, 0)

# 5. Aplicar dilatación y erosión en las imágenes binarias (APERTURA: Primero erosión, Después dilatación)
# Elimino objetos verticales
kernel = np.ones((1,5),np.uint8)
binary_green = cv2.morphologyEx(np.where(mask_green > 0, 1, 0).astype(np.uint8), cv2.MORPH_ERODE, kernel)
binary_yellow = cv2.morphologyEx(np.where(mask_yellow > 0, 1, 0).astype(np.uint8), cv2.MORPH_ERODE, kernel)
binary_red = cv2.morphologyEx(np.where(mask_red > 0, 1, 0).astype(np.uint8), cv2.MORPH_ERODE, kernel)
# Elimino objetos horizontales
kernel = np.ones((5,1),np.uint8)
binary_green = cv2.morphologyEx(np.where(binary_green > 0, 1, 0).astype(np.uint8), cv2.MORPH_ERODE, kernel)
binary_yellow = cv2.morphologyEx(np.where(binary_yellow > 0, 1, 0).astype(np.uint8), cv2.MORPH_ERODE, kernel)
binary_red = cv2.morphologyEx(np.where(binary_red > 0, 1, 0).astype(np.uint8), cv2.MORPH_ERODE, kernel)
# Amplio objetos
kernel = np.ones((5,5),np.uint8)
binary_green = cv2.morphologyEx(np.where(binary_green > 0, 1, 0).astype(np.uint8), cv2.MORPH_DILATE, kernel)
binary_yellow = cv2.morphologyEx(np.where(binary_yellow > 0, 1, 0).astype(np.uint8), cv2.MORPH_DILATE, kernel)
binary_red = cv2.morphologyEx(np.where(binary_red > 0, 1, 0).astype(np.uint8), cv2.MORPH_DILATE, kernel)

# 6. Determinar el tipo de semáforo detectado
total_green = np.sum(binary_green)
total_yellow = np.sum(binary_yellow)
total_red = np.sum(binary_red)

if total_green > total_yellow and total_green > total_red:
    print("Semaforo verde detectado")
elif total_yellow > total_green and total_yellow > total_red:
    print("Semaforo amarillo detectado")
elif total_red > total_green and total_red > total_yellow:
    print("Semaforo rojo detectado")
else:
    print("No se detectó ningún semáforo")

# Visualizar las imágenes binarias (opcional)
binary_green_display = (binary_green * 255).astype(np.uint8)
binary_yellow_display = (binary_yellow * 255).astype(np.uint8)
binary_red_display = (binary_red * 255).astype(np.uint8)
cv2.imshow('Green', binary_green_display)
cv2.imshow('Yellow', binary_yellow_display)
cv2.imshow('Red', binary_red_display)
cv2.waitKey(0)
cv2.destroyAllWindows()
